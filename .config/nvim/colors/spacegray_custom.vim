" WARNING: Do not edit this file directly - it is built from the src directory

" ==================================================================
" HIGHLIGHT HELPER
" ==================================================================

function! s:highlight_helper(...)
  let l:syntax_group = a:1
  let l:foreground_color = a:2
  let l:background_color = empty(a:3) ? "NONE" : a:3
  let l:gui = a:0 == 3 ? "None" : a:4

  exec "highlight " . l:syntax_group . " guifg=" . l:foreground_color . " guibg=" . l:background_color . " gui=" . l:gui . " cterm=NONE term=NONE"
endfunction


" ==================================================================
" RESET
" ==================================================================

set background=dark
highlight clear
set termguicolors
syntax on
syntax reset
let g:colors_name = "spacegray_custom"

let s:black = "#20262F"
let s:red = "#BF6262"
let s:green = "#85A7A5"
let s:yellow = "#E5C078"
let s:blue = "#8FA0B2"
let s:purple = "#D791AE"
let s:cyan = "#638E8A"
let s:bluegray = "#789BAD"
let s:lightgray = "#2E3032"
let s:menugray = "#5D6369"
let s:white = "#C0C5CE"

let s:string_green = "#9BB585"
let s:constant_orange = "#C5735E"

call s:highlight_helper("Normal", s:white, s:black)

" ==================================================================
" UI GROUPS
" ==================================================================

" Syntax Groups (descriptions and ordering from `:h w18`) {{{

call s:highlight_helper("Comment", s:menugray, "") " any comment
call s:highlight_helper("Constant", s:constant_orange, "") " any constant
call s:highlight_helper("String", s:string_green, "") " a string constant
call s:highlight_helper("Character", s:string_green, "") " a character constant: 'c', '\n'
call s:highlight_helper("Number", s:constant_orange, "") " a number constant: 234, 0xff
call s:highlight_helper("Boolean", s:purple, "") " a boolean constant: TRUE, false
call s:highlight_helper("Float", s:constant_orange, "") " a floating point constant: 2.3e10
call s:highlight_helper("Identifier", s:white, "") " any variable name
call s:highlight_helper("Function", s:white, "") " function name (also: methods for classes)
call s:highlight_helper("Statement", s:purple, "") " any statement
call s:highlight_helper("Conditional", s:purple, "") " if, then, else, endif, switch, etc.
call s:highlight_helper("Repeat", s:purple, "") " for, do, while, etc.
call s:highlight_helper("Label", s:purple, "") " case, default, etc.
call s:highlight_helper("Operator", s:red, "") " sizeof", "+", "*", etc.
call s:highlight_helper("Keyword", s:purple, "") " any other keyword
call s:highlight_helper("Exception", s:purple, "") " try, catch, throw
call s:highlight_helper("PreProc", s:red, "") " generic Preprocessor
call s:highlight_helper("Include", s:cyan, "") " preprocessor #include
call s:highlight_helper("Define", s:cyan, "") " preprocessor #define
call s:highlight_helper("Macro", s:cyan, "") " same as Define
call s:highlight_helper("PreCondit", s:cyan, "") " preprocessor #if, #else, #endif, etc.
call s:highlight_helper("Type", s:yellow, "") " int, long, char, etc.
call s:highlight_helper("StorageClass", s:yellow, "") " static, register, volatile, etc.
call s:highlight_helper("Structure", s:yellow, "") " struct, union, enum, etc.
call s:highlight_helper("Typedef", s:yellow, "") " A typedef
call s:highlight_helper("Special", s:blue, "") " any special symbol
call s:highlight_helper("SpecialChar", "", "") " special character in a constant
call s:highlight_helper("Tag", "", "") " you can use CTRL-] on this
call s:highlight_helper("Delimiter", "", "") " character that needs attention
call s:highlight_helper("SpecialComment", s:menugray, "") " special things inside a comment
call s:highlight_helper("Debug", "", "") " debugging statements
call s:highlight_helper("Underlined", s:cyan, "") " text that stands out, HTML links
call s:highlight_helper("Ignore", "", "") " left blank, hidden
call s:highlight_helper("Error", s:red, "") " any erroneous construct
call s:highlight_helper("Todo", s:red, "") " anything that needs extra attention; mostly the keywords TODO FIXME and XXX

" }}}

" Highlighting Groups (descriptions and ordering from `:h highlight-groups`) {{{
call s:highlight_helper("ColorColumn", "", s:lightgray) " used for the columns set with 'colorcolumn'
call s:highlight_helper("Conceal", "", "") " placeholder characters substituted for concealed text (see 'conceallevel')
call s:highlight_helper("Cursor", s:black, s:white) " the character under the cursor
" call s:highlight_helper("CursorIM", {}) " like Cursor, but used when in IME mode
call s:highlight_helper("CursorColumn", "NONE", s:lightgray) " the screen column that the cursor is in when 'cursorcolumn' is set
call s:highlight_helper("CursorLine", "NONE", s:lightgray) " the screen line that the cursor is in when 'cursorline' is set
call s:highlight_helper("Directory", s:yellow, "") " directory names (and other special names in listings)
call s:highlight_helper("EndOfBuffer", s:black, "") " filler lines (~) after the last line in the buffer
call s:highlight_helper("ErrorMsg", s:red, "") " error messages on the command line
call s:highlight_helper("VertSplit", s:menugray, "") " the column separating vertically split windows
call s:highlight_helper("Folded", s:menugray, "") " line used for closed folds
" call s:highlight_helper("FoldColumn", {}) " 'foldcolumn'
" call s:highlight_helper("SignColumn", {}) " column where signs are displayed
call s:highlight_helper("IncSearch", s:black, s:green) " 'incsearch' highlighting; also used for the text replaced with ":s///c"
call s:highlight_helper("LineNr", s:menugray, "") " Line number for ":number" and ":#" commands, and when 'number' or 'relativenumber' option is set.
call s:highlight_helper("CursorLineNr", s:menugray, "") " Like LineNr when 'cursorline' or 'relativenumber' is set for the cursor line.
call s:highlight_helper("MatchParen", s:blue, "") " The character under the cursor or just before it, if it is a paired bracket, and its match.
" call s:highlight_helper("ModeMsg", {}) " 'showmode' message (e.g., "-- INSERT --")
" call s:highlight_helper("MoreMsg", {}) " more-prompt
call s:highlight_helper("NonText", s:menugray, "") " '~' and '@' at the end of the window, characters from 'showbreak' and other characters that do not really exist in the text (e.g., ">" displayed when a double-wide character doesn't fit at the end of the line).
call s:highlight_helper("Normal", s:white, s:black) " normal text
call s:highlight_helper("Pmenu", s:white, s:lightgray) " Popup menu: normal item.
call s:highlight_helper("PmenuSel", s:blue, s:menugray) " Popup menu: selected item.
call s:highlight_helper("PmenuSbar", s:menugray, s:menugray) " Popup menu: scrollbar.
call s:highlight_helper("PmenuThumb", s:white, s:white) " Popup menu: Thumb of the scrollbar.
call s:highlight_helper("Question", s:purple, "") " hit-enter prompt and yes/no questions
call s:highlight_helper("QuickFixLine", s:black, s:green) " Current quickfix item in the quickfix window.
call s:highlight_helper("Search", s:black, s:green) " Last search pattern highlighting (see 'hlsearch'). Also used for similar items that need to stand out.
call s:highlight_helper("SpecialKey", s:lightgray, "") " Meta and special keys listed with ":map", also for text used to show unprintable characters in the text, 'listchars'. Generally: text that is displayed differently from what it really is.
call s:highlight_helper("SpellBad", s:yellow, "") " Word that is not recognized by the spellchecker. This will be combined with the highlighting used otherwise.
call s:highlight_helper("SpellCap", s:yellow, "") " Word that should start with a capital. This will be combined with the highlighting used otherwise.
call s:highlight_helper("SpellLocal", s:yellow, "") " Word that is recognized by the spellchecker as one that is used in another region. This will be combined with the highlighting used otherwise.
call s:highlight_helper("SpellRare", s:yellow, "") " Word that is recognized by the spellchecker as one that is hardly ever used. spell This will be combined with the highlighting used otherwise.
call s:highlight_helper("StatusLine", s:white, s:menugray) " status line of current window
call s:highlight_helper("StatusLineNC", s:menugray, "") " status lines of not-current windows Note: if this is equal to "StatusLine" Vim will use "^^^" in the status line of the current window.
call s:highlight_helper("StatusLineTerm", s:white, s:menugray) " status line of current :terminal window
call s:highlight_helper("StatusLineTermNC", s:menugray, "") " status line of non-current :terminal window
call s:highlight_helper("TabLine", s:lightgray, "") " tab pages line, not active tab page label
call s:highlight_helper("TabLineFill", s:white, s:black) " tab pages line, where there are no labels
call s:highlight_helper("TabLineSel", s:white, s:black) " tab pages line, active tab page label
call s:highlight_helper("Terminal", s:white, s:black) " terminal window (see terminal-size-color)
call s:highlight_helper("Title", s:blue, "") " titles for output from ":set all", ":autocmd" etc.
call s:highlight_helper("Visual", s:white, s:menugray) " Visual mode selection
" call s:highlight_helper("VisualNOS", { "bg": s:visual_grey }) " Visual mode selection when vim is "Not Owning the Selection". Only X11 Gui's gui-x11 and xterm-clipboard supports this.
call s:highlight_helper("WarningMsg", s:yellow, "") " warning messages
call s:highlight_helper("WildMenu", s:black, s:blue) " current match in 'wildmenu' completion

" }}}

" VERSION CONTROL
call s:highlight_helper("DiffAdd", s:black, s:green)
call s:highlight_helper("DiffChange", s:black, s:yellow)
call s:highlight_helper("DiffDelete", s:red, "")
call s:highlight_helper("DiffText", s:black, s:yellow, "BOLD")
call s:highlight_helper("GitGutterAdd", s:green, "")
call s:highlight_helper("GitGutterChange", s:yellow, "")
call s:highlight_helper("GitGutterChangeDelete", s:yellow, "")
call s:highlight_helper("GitGutterDelete", s:red, "")
call s:highlight_helper("gitcommitSummary", s:lightgray, "")

" OTHER
call s:highlight_helper("ToolbarLine", s:menugray, "#1E272C")
call s:highlight_helper("ToolbarButton", s:green, s:lightgray)

" CtrlP
call s:highlight_helper("CtrlPStats", s:blue, "")
call s:highlight_helper("CtrlPMatch", s:blue, s:lightgray)

" Neomake
call s:highlight_helper("NeomakeErrorSign", s:red, "")
call s:highlight_helper("NeomakeWarningSign", s:red, "")

if has("nvim")
  call s:highlight_helper("TSInclude", s:purple, "")
  call s:highlight_helper("TSKeyword", s:purple, "")
  call s:highlight_helper("TSKeywordOperator", s:red, "")

  call s:highlight_helper("TSConstant", s:purple, "")
  call s:highlight_helper("TSConstBuiltin", s:constant_orange, "")
  call s:highlight_helper("TSConstMacro", s:purple, "")
  call s:highlight_helper("TSContructor", s:purple, "")

  call s:highlight_helper("TSType", s:blue, "")
  call s:highlight_helper("TSTypeBuiltin", s:yellow, "")

  call s:highlight_helper("TSFunction", s:blue, "")
  call s:highlight_helper("TSFuncBuiltin", s:yellow, "")
  call s:highlight_helper("TSFuncMacro", s:blue, "")
  call s:highlight_helper("TSMethod", s:blue, "")
  call s:highlight_helper("TSParameter", s:white, "")
  call s:highlight_helper("TSParameterReference", s:white, "")
  call s:highlight_helper("TSProperty", s:blue, "")

  call s:highlight_helper("TSVariable", s:white, "")
  call s:highlight_helper("TSVariableBuiltin", s:purple, "")

  call s:highlight_helper("TSTag", s:yellow, "")
  call s:highlight_helper("TSLabel", s:red, "")
  call s:highlight_helper("TSSymbol", s:constant_orange, "")
  call s:highlight_helper("TSNamespace", s:yellow, "")

  call s:highlight_helper("TelescopeMatching", s:yellow, "")
  call s:highlight_helper("SnapPosition", s:yellow, "")
  call s:highlight_helper("SnapSelect", s:white, s:lightgray)
endif

" ==================================================================
" VARIABLES
" ==================================================================

" VIM TERMINAL MODE
let g:terminal_ansi_colors = [
      \ s:black,
      \ s:red,
      \ s:green,
      \ s:yellow,
      \ s:blue,
      \ s:purple,
      \ s:cyan,
      \ s:lightgray,
      \ s:menugray,
      \ s:red,
      \ s:green,
      \ s:yellow,
      \ s:blue,
      \ s:purple,
      \ s:cyan,
      \ s:white
      \ ]

" NEOVIM TERMINAL MODE
let g:terminal_color_0 = s:black
let g:terminal_color_1 = s:red
let g:terminal_color_2 = s:green
let g:terminal_color_3 = s:yellow
let g:terminal_color_4 = s:blue
let g:terminal_color_5 = s:purple
let g:terminal_color_6 = s:cyan
let g:terminal_color_7 = s:lightgray
let g:terminal_color_8 = s:menugray
let g:terminal_color_9 = s:red
let g:terminal_color_10 = s:green
let g:terminal_color_11 = s:yellow
let g:terminal_color_12 = s:blue
let g:terminal_color_13 = s:purple
let g:terminal_color_14 = s:cyan
let g:terminal_color_15 = s:white

" FZF
let g:fzf_colors = {
\ "fg":      ["fg", "Normal"],
\ "bg":      ["bg", "Normal"],
\ "hl":      ["fg", "String"],
\ "fg+":     ["fg", "CursorLine", "CursorColumn", "Normal"],
\ "bg+":     ["bg", "CursorLine", "CursorColumn"],
\ "hl+":     ["fg", "String"],
\ "info":    ["fg", "String"],
\ "border":  ["fg", "Ignore"],
\ "prompt":  ["fg", "Comment"],
\ "pointer": ["fg", "String"],
\ "marker":  ["fg", "String"],
\ "spinner": ["fg", "String"],
\ "header":  ["fg", "String"] 
\}

" VIM-POLYGLOT
" let g:javascript_plugin_flow = 1
